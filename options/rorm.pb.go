// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: options/rorm.proto

/*
	Package options is a generated protocol buffer package.

	It is generated from these files:
		options/rorm.proto

	It has these top-level messages:
		RormOptions
		MzsetOptions
		TranOptions
		UidOptions
		Variable
*/
package options

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RormOptions struct {
	Target   string         `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Method   string         `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Param    string         `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	SqlxTran []*TranOptions `protobuf:"bytes,4,rep,name=sqlx_tran,json=sqlxTran" json:"sqlx_tran,omitempty"`
	Mzset    *MzsetOptions  `protobuf:"bytes,5,opt,name=mzset" json:"mzset,omitempty"`
	Success  *RormOptions   `protobuf:"bytes,7,opt,name=success" json:"success,omitempty"`
	Failure  *RormOptions   `protobuf:"bytes,8,opt,name=failure" json:"failure,omitempty"`
}

func (m *RormOptions) Reset()                    { *m = RormOptions{} }
func (m *RormOptions) String() string            { return proto.CompactTextString(m) }
func (*RormOptions) ProtoMessage()               {}
func (*RormOptions) Descriptor() ([]byte, []int) { return fileDescriptorRorm, []int{0} }

func (m *RormOptions) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *RormOptions) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RormOptions) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *RormOptions) GetSqlxTran() []*TranOptions {
	if m != nil {
		return m.SqlxTran
	}
	return nil
}

func (m *RormOptions) GetMzset() *MzsetOptions {
	if m != nil {
		return m.Mzset
	}
	return nil
}

func (m *RormOptions) GetSuccess() *RormOptions {
	if m != nil {
		return m.Success
	}
	return nil
}

func (m *RormOptions) GetFailure() *RormOptions {
	if m != nil {
		return m.Failure
	}
	return nil
}

type MzsetOptions struct {
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Key    string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Field  string `protobuf:"bytes,5,opt,name=field,proto3" json:"field,omitempty"`
	Value  string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MzsetOptions) Reset()                    { *m = MzsetOptions{} }
func (m *MzsetOptions) String() string            { return proto.CompactTextString(m) }
func (*MzsetOptions) ProtoMessage()               {}
func (*MzsetOptions) Descriptor() ([]byte, []int) { return fileDescriptorRorm, []int{1} }

func (m *MzsetOptions) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *MzsetOptions) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *MzsetOptions) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MzsetOptions) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *MzsetOptions) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TranOptions struct {
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Param  string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	Slice  string `protobuf:"bytes,4,opt,name=slice,proto3" json:"slice,omitempty"`
}

func (m *TranOptions) Reset()                    { *m = TranOptions{} }
func (m *TranOptions) String() string            { return proto.CompactTextString(m) }
func (*TranOptions) ProtoMessage()               {}
func (*TranOptions) Descriptor() ([]byte, []int) { return fileDescriptorRorm, []int{2} }

func (m *TranOptions) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *TranOptions) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *TranOptions) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *TranOptions) GetSlice() string {
	if m != nil {
		return m.Slice
	}
	return ""
}

type UidOptions struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Seed string `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (m *UidOptions) Reset()                    { *m = UidOptions{} }
func (m *UidOptions) String() string            { return proto.CompactTextString(m) }
func (*UidOptions) ProtoMessage()               {}
func (*UidOptions) Descriptor() ([]byte, []int) { return fileDescriptorRorm, []int{3} }

func (m *UidOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UidOptions) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

type Variable struct {
	VarName string `protobuf:"bytes,1,opt,name=varName,proto3" json:"varName,omitempty"`
	VarType string `protobuf:"bytes,2,opt,name=varType,proto3" json:"varType,omitempty"`
}

func (m *Variable) Reset()                    { *m = Variable{} }
func (m *Variable) String() string            { return proto.CompactTextString(m) }
func (*Variable) ProtoMessage()               {}
func (*Variable) Descriptor() ([]byte, []int) { return fileDescriptorRorm, []int{4} }

func (m *Variable) GetVarName() string {
	if m != nil {
		return m.VarName
	}
	return ""
}

func (m *Variable) GetVarType() string {
	if m != nil {
		return m.VarType
	}
	return ""
}

var E_SqlType = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         44401,
	Name:          "rorm.sqlType",
	Tag:           "varint,44401,opt,name=sqlType",
	Filename:      "options/rorm.proto",
}

var E_RedisType = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         44402,
	Name:          "rorm.redisType",
	Tag:           "varint,44402,opt,name=redisType",
	Filename:      "options/rorm.proto",
}

var E_UseUid = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         44403,
	Name:          "rorm.useUid",
	Tag:           "varint,44403,opt,name=useUid",
	Filename:      "options/rorm.proto",
}

var E_UseNsq = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         44404,
	Name:          "rorm.useNsq",
	Tag:           "varint,44404,opt,name=useNsq",
	Filename:      "options/rorm.proto",
}

var E_GinHandler = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         44406,
	Name:          "rorm.ginHandler",
	Tag:           "varint,44406,opt,name=ginHandler",
	Filename:      "options/rorm.proto",
}

var E_GrpcApiImp = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         44407,
	Name:          "rorm.grpcApiImp",
	Tag:           "varint,44407,opt,name=grpcApiImp",
	Filename:      "options/rorm.proto",
}

var E_Opts = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*RormOptions)(nil),
	Field:         44401,
	Name:          "rorm.opts",
	Tag:           "bytes,44401,opt,name=opts",
	Filename:      "options/rorm.proto",
}

var E_Uid = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*UidOptions)(nil),
	Field:         44402,
	Name:          "rorm.uid",
	Tag:           "bytes,44402,opt,name=uid",
	Filename:      "options/rorm.proto",
}

func init() {
	proto.RegisterType((*RormOptions)(nil), "rorm.RormOptions")
	proto.RegisterType((*MzsetOptions)(nil), "rorm.MzsetOptions")
	proto.RegisterType((*TranOptions)(nil), "rorm.TranOptions")
	proto.RegisterType((*UidOptions)(nil), "rorm.UidOptions")
	proto.RegisterType((*Variable)(nil), "rorm.Variable")
	proto.RegisterExtension(E_SqlType)
	proto.RegisterExtension(E_RedisType)
	proto.RegisterExtension(E_UseUid)
	proto.RegisterExtension(E_UseNsq)
	proto.RegisterExtension(E_GinHandler)
	proto.RegisterExtension(E_GrpcApiImp)
	proto.RegisterExtension(E_Opts)
	proto.RegisterExtension(E_Uid)
}
func (m *RormOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RormOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Param) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Param)))
		i += copy(dAtA[i:], m.Param)
	}
	if len(m.SqlxTran) > 0 {
		for _, msg := range m.SqlxTran {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRorm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Mzset != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRorm(dAtA, i, uint64(m.Mzset.Size()))
		n1, err := m.Mzset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Success != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRorm(dAtA, i, uint64(m.Success.Size()))
		n2, err := m.Success.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Failure != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRorm(dAtA, i, uint64(m.Failure.Size()))
		n3, err := m.Failure.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *MzsetOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MzsetOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Field) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *TranOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TranOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Param) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Param)))
		i += copy(dAtA[i:], m.Param)
	}
	if len(m.Slice) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Slice)))
		i += copy(dAtA[i:], m.Slice)
	}
	return i, nil
}

func (m *UidOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UidOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Seed) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.Seed)))
		i += copy(dAtA[i:], m.Seed)
	}
	return i, nil
}

func (m *Variable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Variable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VarName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.VarName)))
		i += copy(dAtA[i:], m.VarName)
	}
	if len(m.VarType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRorm(dAtA, i, uint64(len(m.VarType)))
		i += copy(dAtA[i:], m.VarType)
	}
	return i, nil
}

func encodeVarintRorm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RormOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	if len(m.SqlxTran) > 0 {
		for _, e := range m.SqlxTran {
			l = e.Size()
			n += 1 + l + sovRorm(uint64(l))
		}
	}
	if m.Mzset != nil {
		l = m.Mzset.Size()
		n += 1 + l + sovRorm(uint64(l))
	}
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovRorm(uint64(l))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovRorm(uint64(l))
	}
	return n
}

func (m *MzsetOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	return n
}

func (m *TranOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Slice)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	return n
}

func (m *UidOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	return n
}

func (m *Variable) Size() (n int) {
	var l int
	_ = l
	l = len(m.VarName)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	l = len(m.VarType)
	if l > 0 {
		n += 1 + l + sovRorm(uint64(l))
	}
	return n
}

func sovRorm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRorm(x uint64) (n int) {
	return sovRorm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RormOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRorm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RormOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RormOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlxTran", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SqlxTran = append(m.SqlxTran, &TranOptions{})
			if err := m.SqlxTran[len(m.SqlxTran)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mzset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mzset == nil {
				m.Mzset = &MzsetOptions{}
			}
			if err := m.Mzset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Success == nil {
				m.Success = &RormOptions{}
			}
			if err := m.Success.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &RormOptions{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRorm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRorm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MzsetOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRorm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MzsetOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MzsetOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRorm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRorm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TranOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRorm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRorm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRorm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UidOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRorm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UidOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UidOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRorm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRorm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Variable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRorm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Variable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Variable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VarName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRorm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VarType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRorm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRorm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRorm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRorm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRorm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRorm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRorm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRorm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRorm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRorm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("options/rorm.proto", fileDescriptorRorm) }

var fileDescriptorRorm = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0xe6, 0xff, 0x84, 0x43, 0x59, 0x55, 0xc8, 0xf4, 0x10, 0xaa, 0x9c, 0x22, 0xa1,
	0x38, 0x52, 0xe1, 0x82, 0x91, 0x40, 0x45, 0x95, 0x80, 0x43, 0x83, 0x64, 0x5a, 0x0e, 0x5c, 0xd0,
	0xc6, 0x9e, 0xb8, 0x2b, 0x6c, 0xaf, 0xb3, 0x6b, 0x47, 0x14, 0x71, 0xe7, 0x15, 0x78, 0x24, 0x8e,
	0x9c, 0x39, 0xa1, 0xf0, 0x04, 0x14, 0x04, 0x57, 0xb4, 0x7f, 0xdc, 0xb8, 0x02, 0x14, 0x90, 0xb8,
	0xcd, 0x37, 0xfe, 0x7e, 0xdf, 0x78, 0x27, 0x1b, 0x03, 0xe1, 0x79, 0xc1, 0x78, 0x26, 0x27, 0x82,
	0x8b, 0xd4, 0xcb, 0x05, 0x2f, 0x38, 0x69, 0xaa, 0x7a, 0x77, 0x1c, 0xb3, 0xe2, 0xb4, 0x9c, 0x79,
	0x21, 0x4f, 0x27, 0x31, 0x8f, 0xf9, 0x44, 0x3f, 0x9c, 0x95, 0x73, 0xad, 0xb4, 0xd0, 0x95, 0x81,
	0x76, 0x0f, 0x2f, 0xd9, 0x13, 0x9a, 0xc5, 0x6b, 0x40, 0x17, 0xe1, 0x38, 0xc6, 0x6c, 0x1c, 0xf3,
	0x49, 0x84, 0x32, 0x14, 0x2c, 0x2f, 0xb8, 0xa8, 0x95, 0x26, 0x65, 0xf8, 0x76, 0x0b, 0xfa, 0x01,
	0x17, 0xe9, 0x13, 0xf3, 0x56, 0xe4, 0x1a, 0xb4, 0x0b, 0x2a, 0x62, 0x2c, 0x5c, 0x67, 0xcf, 0x19,
	0xf5, 0x02, 0xab, 0x54, 0x3f, 0xc5, 0xe2, 0x94, 0x47, 0xee, 0x96, 0xe9, 0x1b, 0x45, 0x76, 0xa0,
	0x95, 0x53, 0x41, 0x53, 0xb7, 0xa1, 0xdb, 0x46, 0x10, 0x0f, 0x7a, 0x72, 0x91, 0xbc, 0x7a, 0x51,
	0x08, 0x9a, 0xb9, 0xcd, 0xbd, 0xc6, 0xa8, 0xbf, 0x7f, 0xd5, 0xd3, 0x07, 0x3e, 0x16, 0x34, 0xb3,
	0xb3, 0x82, 0xae, 0xf2, 0xa8, 0x06, 0x19, 0x41, 0x2b, 0x7d, 0x2d, 0xb1, 0x70, 0x5b, 0x7b, 0xce,
	0xa8, 0xbf, 0x4f, 0x8c, 0xf7, 0x48, 0xb5, 0x2a, 0xb3, 0x31, 0x90, 0x9b, 0xd0, 0x91, 0x65, 0x18,
	0xa2, 0x94, 0x6e, 0x47, 0x7b, 0x6d, 0x6e, 0xed, 0x0c, 0x41, 0xe5, 0x50, 0xe6, 0x39, 0x65, 0x49,
	0x29, 0xd0, 0xed, 0xfe, 0xd1, 0x6c, 0x1d, 0xc3, 0x37, 0x70, 0xa5, 0x3e, 0xf0, 0x9f, 0x37, 0xb1,
	0x0d, 0x8d, 0x97, 0x78, 0x66, 0xf7, 0xa0, 0x4a, 0xb5, 0x9b, 0x39, 0xc3, 0x24, 0xd2, 0xa7, 0xea,
	0x05, 0x46, 0xa8, 0xee, 0x92, 0x26, 0x25, 0xba, 0x6d, 0xd3, 0xd5, 0x62, 0xc8, 0xa0, 0x5f, 0x5b,
	0xcd, 0x7f, 0xfa, 0x19, 0x76, 0xa0, 0x25, 0x13, 0x16, 0xa2, 0xdb, 0x34, 0x5d, 0x2d, 0x86, 0xb7,
	0x01, 0x4e, 0x58, 0x54, 0x4d, 0x22, 0xd0, 0xcc, 0x68, 0x8a, 0x76, 0x8e, 0xae, 0x55, 0x4f, 0x22,
	0x56, 0x33, 0x74, 0x3d, 0xbc, 0x07, 0xdd, 0x67, 0x54, 0x30, 0x3a, 0x4b, 0x90, 0xb8, 0xd0, 0x59,
	0x52, 0x31, 0x5d, 0x63, 0x95, 0xb4, 0x4f, 0x8e, 0xcf, 0x72, 0xb4, 0x70, 0x25, 0xfd, 0xbb, 0xd0,
	0x91, 0x8b, 0x44, 0x95, 0xe4, 0x86, 0x17, 0x73, 0x1e, 0x27, 0xe8, 0x55, 0xf7, 0xd5, 0x7b, 0x8a,
	0x62, 0xc9, 0x42, 0xb4, 0xef, 0xe4, 0x7e, 0xf9, 0xa8, 0xe0, 0x46, 0x50, 0x11, 0xfe, 0x7d, 0xe8,
	0x09, 0x8c, 0x98, 0xfc, 0x3b, 0xfc, 0xdc, 0xe2, 0x6b, 0xc6, 0xbf, 0x03, 0xed, 0x52, 0xe2, 0x09,
	0x8b, 0x36, 0xd3, 0x5f, 0x35, 0xdd, 0x0d, 0x2c, 0x60, 0xd1, 0xa9, 0x5c, 0x6c, 0x46, 0xbf, 0xd5,
	0xd0, 0xa9, 0x5c, 0xf8, 0x07, 0x00, 0x31, 0xcb, 0x1e, 0xd1, 0x2c, 0x4a, 0x50, 0x6c, 0xc6, 0xbf,
	0x5b, 0xbc, 0x06, 0xe9, 0x08, 0x91, 0x87, 0x07, 0x39, 0x7b, 0x9c, 0xe6, 0x9b, 0x23, 0x7e, 0x5c,
	0x44, 0x5c, 0x40, 0xfe, 0x43, 0x68, 0xf2, 0xbc, 0x90, 0x64, 0xf0, 0x0b, 0x7c, 0xa4, 0x2f, 0xcf,
	0xe5, 0xad, 0xff, 0xf6, 0x4f, 0xa2, 0x03, 0xfc, 0x43, 0x68, 0x94, 0x2c, 0xda, 0x98, 0x73, 0x6e,
	0x73, 0xb6, 0x4d, 0xce, 0xfa, 0xae, 0x05, 0x0a, 0x7f, 0x70, 0xfd, 0xfd, 0x6a, 0xe0, 0x7c, 0x58,
	0x0d, 0x9c, 0x4f, 0xab, 0x81, 0xf3, 0xee, 0xf3, 0xc0, 0x79, 0xde, 0xb1, 0x9f, 0xc4, 0x59, 0x5b,
	0x27, 0xde, 0xfa, 0x19, 0x00, 0x00, 0xff, 0xff, 0xad, 0x09, 0xe7, 0x7d, 0x24, 0x05, 0x00, 0x00,
}
