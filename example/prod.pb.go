// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prod.proto

/*
	Package prod is a generated protocol buffer package.

	It is generated from these files:
		prod.proto

	It has these top-level messages:
		Prod
		Sku
		ProdId
*/
package prod

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golangper/protoc-gen-rorm/options"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.


// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.

type Prod struct {
	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	Skus    []*Sku `protobuf:"bytes,4,rep,name=skus" json:"skus,omitempty"`
}

func (m *Prod) Reset()                    { *m = Prod{} }
func (m *Prod) String() string            { return proto.CompactTextString(m) }
func (*Prod) ProtoMessage()               {}
func (*Prod) Descriptor() ([]byte, []int) { return fileDescriptorProd, []int{0} }

func (m *Prod) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Prod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Prod) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *Prod) GetSkus() []*Sku {
	if m != nil {
		return m.Skus
	}
	return nil
}

type Sku struct {
	SkuId  int64   `protobuf:"varint,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	Price  float32 `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	Bn     string  `protobuf:"bytes,3,opt,name=bn,proto3" json:"bn,omitempty"`
	Weight float32 `protobuf:"fixed32,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *Sku) Reset()                    { *m = Sku{} }
func (m *Sku) String() string            { return proto.CompactTextString(m) }
func (*Sku) ProtoMessage()               {}
func (*Sku) Descriptor() ([]byte, []int) { return fileDescriptorProd, []int{1} }

func (m *Sku) GetSkuId() int64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

func (m *Sku) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Sku) GetBn() string {
	if m != nil {
		return m.Bn
	}
	return ""
}

func (m *Sku) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type ProdId struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ProdId) Reset()                    { *m = ProdId{} }
func (m *ProdId) String() string            { return proto.CompactTextString(m) }
func (*ProdId) ProtoMessage()               {}
func (*ProdId) Descriptor() ([]byte, []int) { return fileDescriptorProd, []int{2} }

func (m *ProdId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Prod)(nil), "prod.Prod")
	proto.RegisterType((*Sku)(nil), "prod.Sku")
	proto.RegisterType((*ProdId)(nil), "prod.ProdId")
}
func (m *Prod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prod) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProd(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProd(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Details) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProd(dAtA, i, uint64(len(m.Details)))
		i += copy(dAtA[i:], m.Details)
	}
	if len(m.Skus) > 0 {
		for _, msg := range m.Skus {
			dAtA[i] = 0x22
			i++
			i = encodeVarintProd(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Sku) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sku) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SkuId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProd(dAtA, i, uint64(m.SkuId))
	}
	if m.Price != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i += 4
	}
	if len(m.Bn) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProd(dAtA, i, uint64(len(m.Bn)))
		i += copy(dAtA[i:], m.Bn)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Weight))))
		i += 4
	}
	return i, nil
}

func (m *ProdId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProdId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProd(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func encodeVarintProd(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Prod) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProd(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProd(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovProd(uint64(l))
	}
	if len(m.Skus) > 0 {
		for _, e := range m.Skus {
			l = e.Size()
			n += 1 + l + sovProd(uint64(l))
		}
	}
	return n
}

func (m *Sku) Size() (n int) {
	var l int
	_ = l
	if m.SkuId != 0 {
		n += 1 + sovProd(uint64(m.SkuId))
	}
	if m.Price != 0 {
		n += 5
	}
	l = len(m.Bn)
	if l > 0 {
		n += 1 + l + sovProd(uint64(l))
	}
	if m.Weight != 0 {
		n += 5
	}
	return n
}

func (m *ProdId) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProd(uint64(m.Id))
	}
	return n
}

func sovProd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProd(x uint64) (n int) {
	return sovProd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Prod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skus = append(m.Skus, &Sku{})
			if err := m.Skus[len(m.Skus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sku) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sku: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sku: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkuId", wireType)
			}
			m.SkuId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkuId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Weight = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipProd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProdId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProdId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProdId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProd   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("prod.proto", fileDescriptorProd) }

var fileDescriptorProd = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcd, 0xea, 0xd3, 0x40,
	0x14, 0xc5, 0x9d, 0x24, 0x4d, 0xed, 0xb5, 0x88, 0x0c, 0x46, 0x42, 0xc0, 0x30, 0x64, 0xd3, 0x22,
	0x34, 0x81, 0xba, 0x50, 0x50, 0x11, 0xdc, 0x48, 0x77, 0x92, 0xee, 0xdc, 0x48, 0x92, 0x19, 0xd3,
	0x21, 0x1f, 0x13, 0xe7, 0x83, 0x8a, 0x4f, 0x20, 0x3e, 0x81, 0x8f, 0xe1, 0xd2, 0x47, 0x70, 0xe9,
	0x2e, 0x5b, 0xa9, 0x2f, 0x22, 0x99, 0x54, 0x5d, 0xfc, 0x77, 0xf7, 0x77, 0x39, 0x97, 0x73, 0xce,
	0x05, 0x18, 0xa4, 0xa0, 0xe9, 0x20, 0x85, 0x16, 0xd8, 0x9b, 0xe6, 0xe8, 0x49, 0xcd, 0xf5, 0xc9,
	0x94, 0x69, 0x25, 0xba, 0xac, 0x16, 0x6d, 0xd1, 0xd7, 0x03, 0x93, 0x99, 0x55, 0x54, 0xbb, 0x9a,
	0xf5, 0x3b, 0x29, 0x64, 0x97, 0x89, 0x41, 0x73, 0xd1, 0xab, 0x6c, 0x82, 0xf9, 0x3c, 0xa9, 0xc0,
	0x7b, 0x23, 0x05, 0xc5, 0x77, 0xc1, 0xe1, 0x34, 0x44, 0x04, 0x6d, 0xdd, 0xdc, 0xe1, 0x14, 0x63,
	0xf0, 0xfa, 0xa2, 0x63, 0xa1, 0x43, 0xd0, 0x76, 0x95, 0xdb, 0x19, 0x87, 0xb0, 0xa4, 0x4c, 0x17,
	0xbc, 0x55, 0xa1, 0x6b, 0xd7, 0x7f, 0x11, 0x3f, 0x04, 0x4f, 0x35, 0x46, 0x85, 0x1e, 0x71, 0xb7,
	0x77, 0xf6, 0xab, 0xd4, 0xe6, 0x3b, 0x36, 0x26, 0xb7, 0xeb, 0xe4, 0x2d, 0xb8, 0xc7, 0xc6, 0xe0,
	0x00, 0x7c, 0xd5, 0x98, 0x77, 0xff, 0x7c, 0x16, 0xaa, 0x31, 0x07, 0x8a, 0xef, 0xc3, 0x62, 0x90,
	0xbc, 0x9a, 0xbd, 0x9c, 0x7c, 0x86, 0x29, 0x50, 0xd9, 0x5f, 0x7d, 0x9c, 0xb2, 0xc7, 0x0f, 0xc0,
	0x3f, 0x33, 0x5e, 0x9f, 0x74, 0xe8, 0x59, 0xd9, 0x95, 0x92, 0x10, 0xfc, 0xa9, 0xc0, 0xe1, 0x46,
	0x85, 0xfd, 0x27, 0x58, 0x4e, 0x39, 0x4c, 0xa5, 0x71, 0x01, 0xcb, 0x9a, 0x69, 0x5b, 0x74, 0x3d,
	0x87, 0x9b, 0x6f, 0x22, 0xf8, 0x4f, 0xc9, 0xf3, 0x2f, 0x63, 0xf0, 0x14, 0x5c, 0x61, 0x34, 0xbe,
	0xad, 0x3e, 0xb4, 0x1f, 0xd3, 0xd7, 0x4c, 0x47, 0x9b, 0x8d, 0x62, 0x2d, 0xab, 0x34, 0x79, 0x44,
	0xde, 0x4b, 0xd1, 0x91, 0x49, 0x4e, 0xce, 0x27, 0x26, 0x19, 0xe1, 0x94, 0xbc, 0x20, 0x2f, 0x37,
	0xcf, 0x78, 0x9f, 0x72, 0x1a, 0xad, 0x3f, 0x8f, 0x01, 0xfa, 0x36, 0x06, 0xe8, 0xfb, 0x18, 0xa0,
	0x57, 0xf7, 0x7e, 0x5c, 0x62, 0xf4, 0xf3, 0x12, 0xa3, 0x5f, 0x97, 0x18, 0x7d, 0xfd, 0x1d, 0xdf,
	0x2a, 0x7d, 0xfb, 0xef, 0xc7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x81, 0x98, 0x1d, 0x03, 0xbc,
	0x01, 0x00, 0x00,
}
