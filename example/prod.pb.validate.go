// Code generated by protoc-gen-validate
// source: example/prod.proto
// DO NOT EDIT!!!

package example

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Prod with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Prod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Details

	for idx, item := range m.GetSkus() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProdValidationError{
					field:  fmt.Sprintf("Skus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProdValidationError is the validation error returned by Prod.Validate if the
// designated constraints aren't met.
type ProdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProdValidationError) ErrorName() string { return "ProdValidationError" }

// Error satisfies the builtin error interface
func (e ProdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProdValidationError{}

// Validate checks the field values on Sku with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Sku) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SkuId

	// no validation rules for Price

	// no validation rules for Bn

	// no validation rules for Weight

	return nil
}

// SkuValidationError is the validation error returned by Sku.Validate if the
// designated constraints aren't met.
type SkuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuValidationError) ErrorName() string { return "SkuValidationError" }

// Error satisfies the builtin error interface
func (e SkuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSku.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuValidationError{}

// Validate checks the field values on ProdId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProdId) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ProdIdValidationError is the validation error returned by ProdId.Validate if
// the designated constraints aren't met.
type ProdIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProdIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProdIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProdIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProdIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProdIdValidationError) ErrorName() string { return "ProdIdValidationError" }

// Error satisfies the builtin error interface
func (e ProdIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProdId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProdIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProdIdValidationError{}

// Validate checks the field values on empty with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *empty) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// emptyValidationError is the validation error returned by empty.Validate if
// the designated constraints aren't met.
type emptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e emptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e emptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e emptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e emptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e emptyValidationError) ErrorName() string { return "emptyValidationError" }

// Error satisfies the builtin error interface
func (e emptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sempty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = emptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = emptyValidationError{}
