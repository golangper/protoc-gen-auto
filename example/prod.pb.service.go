// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example/prod.proto

package example

import "github.com/op/go-logging"
import "golang.org/x/net/context"
import "github.com/fainted/snowflake"
import "github.com/jmoiron/sqlx"
import "net/http"
import "github.com/gin-gonic/gin"
import "github.com/gin-gonic/gin/binding"

// Reference imports to suppress errors if they are not otherwise used.

type _ProductImp struct {
	db  *sqlx.DB
	log *logging.Logger
}

func (s *_ProductImp) GetProd(c context.Context, in *ProdId) (*Prod, error) {
	var err error
	out := &Prod{}
	err = in.Validate()
	if err != nil {
		return out, err
	}
	err = s.db.Get(out, "select * from prod where id = ?", in.Id)
	if err != nil {
		s.log.Error(err.Error())
		return out, err
	}
	err = s.db.Select(&out.Skus, "select * from sku where prod_id=?", in.Id)
	if err != nil {
		s.log.Error(err.Error())
		return out, err
	}
	return out, nil
}

func (s *_ProductImp) SetProd(c context.Context, in *Prod) (*Empty, error) {
	var err error
	out := &Empty{}
	err = in.Validate()
	if err != nil {
		return out, err
	}
	_s := in.Id % 256
	_worker, err := snowflake.NewChannelWorker(_s)
	if err != nil {
		return out, err
	}
	uid, _ := _worker.Next()
	var _ = uid
	tx, err := s.db.Beginx()
	if err != nil {
		s.log.Error(err.Error())
		return out, err
	}
	_, err = s.db.Exec("insert into prod (id,name,details) values (?,?,?)", uid, in.Name, in.Details)
	if err != nil {
		tx.Rollback()
		s.log.Error(err.Error())
		return out, err
	}
	for _, obj := range in.Skus {
		_, err = s.db.Exec("insert into sku (sku_id,price,bn,weight,prod_id) values (?,?,?,?,?)", obj.SkuId, obj.Price, obj.Bn, obj.Weight, in.Id)
		if err != nil {
			tx.Rollback()
			s.log.Error(err.Error())
			return out, err
		}
	}
	tx.Commit()
	return out, nil
}

type ProductImp struct {
	_ProductImp
}

func NewProductImp(db *sqlx.DB, log *logging.Logger) ProductImp {
	res := ProductImp{}
	res.db = db
	res.log = log
	return res
}

func (s *ProductImp) GetProdHandler(c *gin.Context) {
	var prm *ProdId
	var err error
	err = c.ShouldBindWith(prm, binding.JSON)
	if err != nil {
		s.log.Error(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"resp": err.Error()})
		return
	}
	if err = prm.Validate(); err != nil {
		s.log.Error(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"resp": err.Error()})
		return
	}
	res, err := s.GetProd(context.Background(), prm)
	if err != nil {
		s.log.Error(err.Error())
		c.JSON(http.StatusServiceUnavailable, gin.H{"resp": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"resp": res})
}

func (s *ProductImp) SetProdHandler(c *gin.Context) {
	var prm *Prod
	var err error
	err = c.ShouldBindWith(prm, binding.JSON)
	if err != nil {
		s.log.Error(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"resp": err.Error()})
		return
	}
	if err = prm.Validate(); err != nil {
		s.log.Error(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"resp": err.Error()})
		return
	}
	res, err := s.SetProd(context.Background(), prm)
	if err != nil {
		s.log.Error(err.Error())
		c.JSON(http.StatusServiceUnavailable, gin.H{"resp": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"resp": res})
}

func (s *ProductImp) InitApi(g *gin.Engine) {
	g.GET("/v1/prod/getProd", s.GetProdHandler)
}
