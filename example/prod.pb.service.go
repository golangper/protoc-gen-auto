// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prod.proto

package example

import context "golang.org/x/net/context"
import snowflake "github.com/fainted/snowflake"
import log "log"
import grpc "google.golang.org/grpc"
import xorm "github.com/go-xorm/xorm"
import http "net/http"
import gin "github.com/gin-gonic/gin"
import roundrobin "google.golang.org/grpc/balancer/roundrobin"
import json "encoding/json"



// Reference imports to suppress errors if they are not otherwise used.

var _ = json.Marshal
type _ProductImp struct {
	db *xorm.Engine
}

func (s *_ProductImp) GetProd(c context.Context, in *ProdId) (*Prod, error) {
	var err error
	out := &Prod{}
	err = in.Validate()
	if err != nil {
		return out, err
	}
	_, err = s.db.SQL("select * from prod where id = ?" ,in.Id).Get(out)
	if err != nil {
		log.Println("GetProd[s.db.SQL-Get]:", err.Error())
		return out, err
	}
	err = s.db.SQL("select * from sku where prod_id=?" ,in.Id).Find(&out.Skus)
	if err != nil {
		log.Println("GetProd[s.db.SQL-Find]:", err.Error())
		return out, err
	}
	return out, nil
}

func (s *_ProductImp) SetProd(c context.Context, in *Prod) (*Empty, error) {
	var err error
	out := &Empty{}
	err = in.Validate()
	if err != nil {
		return out, err
	}
	_s := in.Id % 256
	_worker, err := snowflake.NewChannelWorker(_s)
	if err != nil {
		return out, err
	}
	uid , _ := _worker.Next()
	var _ = uid
	tx := s.db.NewSession()
	err = tx.Begin()
	if err != nil {
		log.Println("SetProd[tx.Begin]:", err.Error())
		return out, err
	}
	_, err = s.db.Exec("insert into prod (id,name,details) values (?,?,?)" ,uid,in.Name,in.Details)
	if err != nil {
		tx.Rollback()
		log.Println("SetProd[s.db.Exec] :", err.Error())
		return out, err
	}
	for _, obj := range in.Skus{
		_, err = s.db.Exec("insert into sku (sku_id,price,bn,weight,prod_id) values (?,?,?,?,?)" ,obj.SkuId,obj.Price,obj.Bn,obj.Weight,in.Id)
		if err != nil {
			tx.Rollback()
			log.Println("SetProd[s.db.Exec] :", err.Error())
			return out, err
		}
	}
	tx.Commit()
	return out, nil
}

type ProductImp struct {
	_ProductImp
}

func NewProductImp(db *xorm.Engine, ) ProductImp {
	res := ProductImp{}
	res.db = db
	return res
}


func (s *ProductImp) GetProdHandler(c *gin.Context) {
	prm := &ProdId{}
	var err error
	err = c.ShouldBind(prm)
	if err != nil {
		log.Println("GetProdHandler[c.ShouldBind] :", err.Error())
		c.String(http.StatusBadRequest, err.Error())
		return
	}
	res, err := s.GetProd(context.Background(), prm)
	if err != nil {
		log.Println("GetProdHandler[s.GetProd] :", err.Error())
		c.String(http.StatusServiceUnavailable, err.Error())
		return
	}
	r,_:=json.Marshal(res)
	c.String(http.StatusOK,string(r))
}

func (s *ProductImp) SetProdHandler(c *gin.Context) {
	prm := &Prod{}
	var err error
	err = c.ShouldBind(prm)
	if err != nil {
		log.Println("SetProdHandler[c.ShouldBind] :", err.Error())
		c.String(http.StatusBadRequest, err.Error())
		return
	}
	res, err := s.SetProd(context.Background(), prm)
	if err != nil {
		log.Println("SetProdHandler[s.SetProd] :", err.Error())
		c.String(http.StatusServiceUnavailable, err.Error())
		return
	}
	r,_:=json.Marshal(res)
	c.String(http.StatusOK,string(r))
}

func (s *ProductImp) InitApi(g *gin.RouterGroup) {
	g.GET("/v1/prod/getProd", s.GetProdHandler)
	g.POST("/v1/prod/setProd", s.SetProdHandler)
}

func (s *ProductImp) NewBalancerClient(target string) ProductClient {
	conn, err := grpc.Dial(target,grpc.WithInsecure(),grpc.WithBalancerName(roundrobin.Name))
	if err != nil {
		log.Fatalln(err)
	}
	return NewProductClient(conn)
}
type _Product2Imp struct {
	db *xorm.Engine
}

func (s *_Product2Imp) GetProd(c context.Context, in *ProdId) (*Prod, error) {
	var err error
	out := &Prod{}
	err = in.Validate()
	if err != nil {
		return out, err
	}
	_, err = s.db.SQL("select * from prod where id = ?" ,in.Id).Get(out)
	if err != nil {
		log.Println("GetProd[s.db.SQL-Get]:", err.Error())
		return out, err
	}
	err = s.db.SQL("select * from sku where prod_id=?" ,in.Id).Find(&out.Skus)
	if err != nil {
		log.Println("GetProd[s.db.SQL-Find]:", err.Error())
		return out, err
	}
	return out, nil
}

type Product2Imp struct {
	_Product2Imp
}

func NewProduct2Imp(db *xorm.Engine, ) Product2Imp {
	res := Product2Imp{}
	res.db = db
	return res
}


func (s *Product2Imp) GetProdHandler(c *gin.Context) {
	prm := &ProdId{}
	var err error
	err = c.ShouldBind(prm)
	if err != nil {
		log.Println("GetProdHandler[c.ShouldBind] :", err.Error())
		c.String(http.StatusBadRequest, err.Error())
		return
	}
	res, err := s.GetProd(context.Background(), prm)
	if err != nil {
		log.Println("GetProdHandler[s.GetProd] :", err.Error())
		c.String(http.StatusServiceUnavailable, err.Error())
		return
	}
	r,_:=json.Marshal(res)
	c.String(http.StatusOK,string(r))
}

func (s *Product2Imp) InitApi(g *gin.RouterGroup) {
	g.GET("/v1/prod/getProd", s.GetProdHandler)
}

func (s *Product2Imp) NewBalancerClient(target string) Product2Client {
	conn, err := grpc.Dial(target,grpc.WithInsecure(),grpc.WithBalancerName(roundrobin.Name))
	if err != nil {
		log.Fatalln(err)
	}
	return NewProduct2Client(conn)
}
